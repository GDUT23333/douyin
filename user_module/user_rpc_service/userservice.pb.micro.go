// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userservice.proto

//指定go文件所属的包名

package user_rpc_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserBaseService service

func NewUserBaseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserBaseService service

type UserBaseService interface {
	//login service
	Login(ctx context.Context, in *DouyinUserLoginRequest, opts ...client.CallOption) (*DouyinUserLoginResponse, error)
	//register service
	Register(ctx context.Context, in *DouyinUserRegisterRequest, opts ...client.CallOption) (*DouyinUserLoginResponse, error)
	//show user info service
	ShowUserInfo(ctx context.Context, in *DouyinUserRequest, opts ...client.CallOption) (*DouyinUserResponse, error)
}

type userBaseService struct {
	c    client.Client
	name string
}

func NewUserBaseService(name string, c client.Client) UserBaseService {
	return &userBaseService{
		c:    c,
		name: name,
	}
}

func (c *userBaseService) Login(ctx context.Context, in *DouyinUserLoginRequest, opts ...client.CallOption) (*DouyinUserLoginResponse, error) {
	req := c.c.NewRequest(c.name, "UserBaseService.Login", in)
	out := new(DouyinUserLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBaseService) Register(ctx context.Context, in *DouyinUserRegisterRequest, opts ...client.CallOption) (*DouyinUserLoginResponse, error) {
	req := c.c.NewRequest(c.name, "UserBaseService.Register", in)
	out := new(DouyinUserLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBaseService) ShowUserInfo(ctx context.Context, in *DouyinUserRequest, opts ...client.CallOption) (*DouyinUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserBaseService.ShowUserInfo", in)
	out := new(DouyinUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserBaseService service

type UserBaseServiceHandler interface {
	//login service
	Login(context.Context, *DouyinUserLoginRequest, *DouyinUserLoginResponse) error
	//register service
	Register(context.Context, *DouyinUserRegisterRequest, *DouyinUserLoginResponse) error
	//show user info service
	ShowUserInfo(context.Context, *DouyinUserRequest, *DouyinUserResponse) error
}

func RegisterUserBaseServiceHandler(s server.Server, hdlr UserBaseServiceHandler, opts ...server.HandlerOption) error {
	type userBaseService interface {
		Login(ctx context.Context, in *DouyinUserLoginRequest, out *DouyinUserLoginResponse) error
		Register(ctx context.Context, in *DouyinUserRegisterRequest, out *DouyinUserLoginResponse) error
		ShowUserInfo(ctx context.Context, in *DouyinUserRequest, out *DouyinUserResponse) error
	}
	type UserBaseService struct {
		userBaseService
	}
	h := &userBaseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserBaseService{h}, opts...))
}

type userBaseServiceHandler struct {
	UserBaseServiceHandler
}

func (h *userBaseServiceHandler) Login(ctx context.Context, in *DouyinUserLoginRequest, out *DouyinUserLoginResponse) error {
	return h.UserBaseServiceHandler.Login(ctx, in, out)
}

func (h *userBaseServiceHandler) Register(ctx context.Context, in *DouyinUserRegisterRequest, out *DouyinUserLoginResponse) error {
	return h.UserBaseServiceHandler.Register(ctx, in, out)
}

func (h *userBaseServiceHandler) ShowUserInfo(ctx context.Context, in *DouyinUserRequest, out *DouyinUserResponse) error {
	return h.UserBaseServiceHandler.ShowUserInfo(ctx, in, out)
}
