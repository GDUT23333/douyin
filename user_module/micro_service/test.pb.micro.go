// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: test.proto

package micro_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RpcTestLoginService service

func NewRpcTestLoginServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RpcTestLoginService service

type RpcTestLoginService interface {
	//rpc login
	TestLogin(ctx context.Context, in *TestLoginRequest, opts ...client.CallOption) (*TestLoginResponse, error)
}

type rpcTestLoginService struct {
	c    client.Client
	name string
}

func NewRpcTestLoginService(name string, c client.Client) RpcTestLoginService {
	return &rpcTestLoginService{
		c:    c,
		name: name,
	}
}

func (c *rpcTestLoginService) TestLogin(ctx context.Context, in *TestLoginRequest, opts ...client.CallOption) (*TestLoginResponse, error) {
	req := c.c.NewRequest(c.name, "RpcTestLoginService.TestLogin", in)
	out := new(TestLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcTestLoginService service

type RpcTestLoginServiceHandler interface {
	//rpc login
	TestLogin(context.Context, *TestLoginRequest, *TestLoginResponse) error
}

func RegisterRpcTestLoginServiceHandler(s server.Server, hdlr RpcTestLoginServiceHandler, opts ...server.HandlerOption) error {
	type rpcTestLoginService interface {
		TestLogin(ctx context.Context, in *TestLoginRequest, out *TestLoginResponse) error
	}
	type RpcTestLoginService struct {
		rpcTestLoginService
	}
	h := &rpcTestLoginServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RpcTestLoginService{h}, opts...))
}

type rpcTestLoginServiceHandler struct {
	RpcTestLoginServiceHandler
}

func (h *rpcTestLoginServiceHandler) TestLogin(ctx context.Context, in *TestLoginRequest, out *TestLoginResponse) error {
	return h.RpcTestLoginServiceHandler.TestLogin(ctx, in, out)
}
