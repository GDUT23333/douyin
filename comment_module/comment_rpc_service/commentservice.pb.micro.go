// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: commentservice.proto

//指定go文件所属的包名

package comment_rpc_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CommentBaseService service

func NewCommentBaseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CommentBaseService service

type CommentBaseService interface {
	//rpc comment action
	CommentAction(ctx context.Context, in *DouyinCommentActionRequest, opts ...client.CallOption) (*DouyinCommentActionResponse, error)
	//rpc comment list
	CommentList(ctx context.Context, in *DouyinCommentListRequest, opts ...client.CallOption) (*DouyinCommentListResponse, error)
}

type commentBaseService struct {
	c    client.Client
	name string
}

func NewCommentBaseService(name string, c client.Client) CommentBaseService {
	return &commentBaseService{
		c:    c,
		name: name,
	}
}

func (c *commentBaseService) CommentAction(ctx context.Context, in *DouyinCommentActionRequest, opts ...client.CallOption) (*DouyinCommentActionResponse, error) {
	req := c.c.NewRequest(c.name, "CommentBaseService.CommentAction", in)
	out := new(DouyinCommentActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentBaseService) CommentList(ctx context.Context, in *DouyinCommentListRequest, opts ...client.CallOption) (*DouyinCommentListResponse, error) {
	req := c.c.NewRequest(c.name, "CommentBaseService.CommentList", in)
	out := new(DouyinCommentListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommentBaseService service

type CommentBaseServiceHandler interface {
	//rpc comment action
	CommentAction(context.Context, *DouyinCommentActionRequest, *DouyinCommentActionResponse) error
	//rpc comment list
	CommentList(context.Context, *DouyinCommentListRequest, *DouyinCommentListResponse) error
}

func RegisterCommentBaseServiceHandler(s server.Server, hdlr CommentBaseServiceHandler, opts ...server.HandlerOption) error {
	type commentBaseService interface {
		CommentAction(ctx context.Context, in *DouyinCommentActionRequest, out *DouyinCommentActionResponse) error
		CommentList(ctx context.Context, in *DouyinCommentListRequest, out *DouyinCommentListResponse) error
	}
	type CommentBaseService struct {
		commentBaseService
	}
	h := &commentBaseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CommentBaseService{h}, opts...))
}

type commentBaseServiceHandler struct {
	CommentBaseServiceHandler
}

func (h *commentBaseServiceHandler) CommentAction(ctx context.Context, in *DouyinCommentActionRequest, out *DouyinCommentActionResponse) error {
	return h.CommentBaseServiceHandler.CommentAction(ctx, in, out)
}

func (h *commentBaseServiceHandler) CommentList(ctx context.Context, in *DouyinCommentListRequest, out *DouyinCommentListResponse) error {
	return h.CommentBaseServiceHandler.CommentList(ctx, in, out)
}
