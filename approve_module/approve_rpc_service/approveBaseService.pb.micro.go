// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: approveBaseService.proto

//指定go文件所属的包名

package approve_rpc_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ApproveBaseService service

func NewApproveBaseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ApproveBaseService service

type ApproveBaseService interface {
	//rpc favorite action
	FavoriteAction(ctx context.Context, in *DouyinFavoriteActionRequest, opts ...client.CallOption) (*DouyinFavoriteActionResponse, error)
	//rpc get favorite list
	FavoriteList(ctx context.Context, in *DouyinFavoriteListRequest, opts ...client.CallOption) (*DouyinFavoriteListResponse, error)
}

type approveBaseService struct {
	c    client.Client
	name string
}

func NewApproveBaseService(name string, c client.Client) ApproveBaseService {
	return &approveBaseService{
		c:    c,
		name: name,
	}
}

func (c *approveBaseService) FavoriteAction(ctx context.Context, in *DouyinFavoriteActionRequest, opts ...client.CallOption) (*DouyinFavoriteActionResponse, error) {
	req := c.c.NewRequest(c.name, "ApproveBaseService.FavoriteAction", in)
	out := new(DouyinFavoriteActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approveBaseService) FavoriteList(ctx context.Context, in *DouyinFavoriteListRequest, opts ...client.CallOption) (*DouyinFavoriteListResponse, error) {
	req := c.c.NewRequest(c.name, "ApproveBaseService.FavoriteList", in)
	out := new(DouyinFavoriteListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApproveBaseService service

type ApproveBaseServiceHandler interface {
	//rpc favorite action
	FavoriteAction(context.Context, *DouyinFavoriteActionRequest, *DouyinFavoriteActionResponse) error
	//rpc get favorite list
	FavoriteList(context.Context, *DouyinFavoriteListRequest, *DouyinFavoriteListResponse) error
}

func RegisterApproveBaseServiceHandler(s server.Server, hdlr ApproveBaseServiceHandler, opts ...server.HandlerOption) error {
	type approveBaseService interface {
		FavoriteAction(ctx context.Context, in *DouyinFavoriteActionRequest, out *DouyinFavoriteActionResponse) error
		FavoriteList(ctx context.Context, in *DouyinFavoriteListRequest, out *DouyinFavoriteListResponse) error
	}
	type ApproveBaseService struct {
		approveBaseService
	}
	h := &approveBaseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ApproveBaseService{h}, opts...))
}

type approveBaseServiceHandler struct {
	ApproveBaseServiceHandler
}

func (h *approveBaseServiceHandler) FavoriteAction(ctx context.Context, in *DouyinFavoriteActionRequest, out *DouyinFavoriteActionResponse) error {
	return h.ApproveBaseServiceHandler.FavoriteAction(ctx, in, out)
}

func (h *approveBaseServiceHandler) FavoriteList(ctx context.Context, in *DouyinFavoriteListRequest, out *DouyinFavoriteListResponse) error {
	return h.ApproveBaseServiceHandler.FavoriteList(ctx, in, out)
}
