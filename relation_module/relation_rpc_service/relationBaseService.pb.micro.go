// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: relationBaseService.proto

//指定go文件所属的包名

package relation_rpc_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RelationBaseService service

func NewRelationBaseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RelationBaseService service

type RelationBaseService interface {
	//rpc relation action
	RelationAction(ctx context.Context, in *DouyinRelationActionRequest, opts ...client.CallOption) (*DouyinRelationActionResponse, error)
	//rpc relation follow list
	RelationFollowList(ctx context.Context, in *DouyinRelationFollowListRequest, opts ...client.CallOption) (*DouyinRelationFollowListResponse, error)
	//rpc relation follower list
	RelationFollowerList(ctx context.Context, in *DouyinRelationFollowerListRequest, opts ...client.CallOption) (*DouyinRelationFollowerListResponse, error)
}

type relationBaseService struct {
	c    client.Client
	name string
}

func NewRelationBaseService(name string, c client.Client) RelationBaseService {
	return &relationBaseService{
		c:    c,
		name: name,
	}
}

func (c *relationBaseService) RelationAction(ctx context.Context, in *DouyinRelationActionRequest, opts ...client.CallOption) (*DouyinRelationActionResponse, error) {
	req := c.c.NewRequest(c.name, "RelationBaseService.RelationAction", in)
	out := new(DouyinRelationActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationBaseService) RelationFollowList(ctx context.Context, in *DouyinRelationFollowListRequest, opts ...client.CallOption) (*DouyinRelationFollowListResponse, error) {
	req := c.c.NewRequest(c.name, "RelationBaseService.RelationFollowList", in)
	out := new(DouyinRelationFollowListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationBaseService) RelationFollowerList(ctx context.Context, in *DouyinRelationFollowerListRequest, opts ...client.CallOption) (*DouyinRelationFollowerListResponse, error) {
	req := c.c.NewRequest(c.name, "RelationBaseService.RelationFollowerList", in)
	out := new(DouyinRelationFollowerListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RelationBaseService service

type RelationBaseServiceHandler interface {
	//rpc relation action
	RelationAction(context.Context, *DouyinRelationActionRequest, *DouyinRelationActionResponse) error
	//rpc relation follow list
	RelationFollowList(context.Context, *DouyinRelationFollowListRequest, *DouyinRelationFollowListResponse) error
	//rpc relation follower list
	RelationFollowerList(context.Context, *DouyinRelationFollowerListRequest, *DouyinRelationFollowerListResponse) error
}

func RegisterRelationBaseServiceHandler(s server.Server, hdlr RelationBaseServiceHandler, opts ...server.HandlerOption) error {
	type relationBaseService interface {
		RelationAction(ctx context.Context, in *DouyinRelationActionRequest, out *DouyinRelationActionResponse) error
		RelationFollowList(ctx context.Context, in *DouyinRelationFollowListRequest, out *DouyinRelationFollowListResponse) error
		RelationFollowerList(ctx context.Context, in *DouyinRelationFollowerListRequest, out *DouyinRelationFollowerListResponse) error
	}
	type RelationBaseService struct {
		relationBaseService
	}
	h := &relationBaseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RelationBaseService{h}, opts...))
}

type relationBaseServiceHandler struct {
	RelationBaseServiceHandler
}

func (h *relationBaseServiceHandler) RelationAction(ctx context.Context, in *DouyinRelationActionRequest, out *DouyinRelationActionResponse) error {
	return h.RelationBaseServiceHandler.RelationAction(ctx, in, out)
}

func (h *relationBaseServiceHandler) RelationFollowList(ctx context.Context, in *DouyinRelationFollowListRequest, out *DouyinRelationFollowListResponse) error {
	return h.RelationBaseServiceHandler.RelationFollowList(ctx, in, out)
}

func (h *relationBaseServiceHandler) RelationFollowerList(ctx context.Context, in *DouyinRelationFollowerListRequest, out *DouyinRelationFollowerListResponse) error {
	return h.RelationBaseServiceHandler.RelationFollowerList(ctx, in, out)
}
