// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: videoBaseService.proto

//指定go文件所属的包名

package video_rpc_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VideoBaseService service

func NewVideoBaseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VideoBaseService service

type VideoBaseService interface {
	//push feed
	PushFeed(ctx context.Context, in *DouyinFeedRequest, opts ...client.CallOption) (*DouyinFeedResponse, error)
	//publish video
	PublishFee(ctx context.Context, in *DouyinPublishActionRequest, opts ...client.CallOption) (*DouyinPublishActionResponse, error)
	//get fees
	GetPublishFees(ctx context.Context, in *DouyinPublishListRequest, opts ...client.CallOption) (*DouyinPublishListResponse, error)
}

type videoBaseService struct {
	c    client.Client
	name string
}

func NewVideoBaseService(name string, c client.Client) VideoBaseService {
	return &videoBaseService{
		c:    c,
		name: name,
	}
}

func (c *videoBaseService) PushFeed(ctx context.Context, in *DouyinFeedRequest, opts ...client.CallOption) (*DouyinFeedResponse, error) {
	req := c.c.NewRequest(c.name, "VideoBaseService.PushFeed", in)
	out := new(DouyinFeedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoBaseService) PublishFee(ctx context.Context, in *DouyinPublishActionRequest, opts ...client.CallOption) (*DouyinPublishActionResponse, error) {
	req := c.c.NewRequest(c.name, "VideoBaseService.PublishFee", in)
	out := new(DouyinPublishActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoBaseService) GetPublishFees(ctx context.Context, in *DouyinPublishListRequest, opts ...client.CallOption) (*DouyinPublishListResponse, error) {
	req := c.c.NewRequest(c.name, "VideoBaseService.GetPublishFees", in)
	out := new(DouyinPublishListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VideoBaseService service

type VideoBaseServiceHandler interface {
	//push feed
	PushFeed(context.Context, *DouyinFeedRequest, *DouyinFeedResponse) error
	//publish video
	PublishFee(context.Context, *DouyinPublishActionRequest, *DouyinPublishActionResponse) error
	//get fees
	GetPublishFees(context.Context, *DouyinPublishListRequest, *DouyinPublishListResponse) error
}

func RegisterVideoBaseServiceHandler(s server.Server, hdlr VideoBaseServiceHandler, opts ...server.HandlerOption) error {
	type videoBaseService interface {
		PushFeed(ctx context.Context, in *DouyinFeedRequest, out *DouyinFeedResponse) error
		PublishFee(ctx context.Context, in *DouyinPublishActionRequest, out *DouyinPublishActionResponse) error
		GetPublishFees(ctx context.Context, in *DouyinPublishListRequest, out *DouyinPublishListResponse) error
	}
	type VideoBaseService struct {
		videoBaseService
	}
	h := &videoBaseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VideoBaseService{h}, opts...))
}

type videoBaseServiceHandler struct {
	VideoBaseServiceHandler
}

func (h *videoBaseServiceHandler) PushFeed(ctx context.Context, in *DouyinFeedRequest, out *DouyinFeedResponse) error {
	return h.VideoBaseServiceHandler.PushFeed(ctx, in, out)
}

func (h *videoBaseServiceHandler) PublishFee(ctx context.Context, in *DouyinPublishActionRequest, out *DouyinPublishActionResponse) error {
	return h.VideoBaseServiceHandler.PublishFee(ctx, in, out)
}

func (h *videoBaseServiceHandler) GetPublishFees(ctx context.Context, in *DouyinPublishListRequest, out *DouyinPublishListResponse) error {
	return h.VideoBaseServiceHandler.GetPublishFees(ctx, in, out)
}
